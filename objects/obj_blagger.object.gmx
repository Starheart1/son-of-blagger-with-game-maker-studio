<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blagger_right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Call the event 'User Defined 0' to initialize the instance properties</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_user(0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>KEY_RIGHT=keyboard_check(vk_right);
KEY_LEFT=keyboard_check(vk_left);
//KEY_JUMP=keyboard_check(vk_rcontrol); 
KEY_JUMP=keyboard_check(vk_space); 
KEY_DOWN=keyboard_check(vk_down);
//This one's for variable jump height:
KEY_FALL=keyboard_check_released(vk_up);

var collision_distance = 0;
horizontal_direction = noone;
vertical_direction = noone;
image_speed = 0;

// Don't move if the screen is opening
if (game_state != PLAYING) exit ;

if (keyboard_check(vk_add ))
{
    room_speed = 30;
    exit;
}

if (keyboard_check(vk_numpad6))
{
    fall_height = 0;
    x += 1;
    exit;
}

if (keyboard_check(vk_numpad4))
{
    fall_height = 0;
    x -= 1;
    exit;
}

if (keyboard_check(vk_subtract))
{
    room_speed = 2;
    exit;
}

if (keyboard_check(ord("1")))
{
    level = 1;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("2")))
{
    level = 2;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("3")))
{
    level = 3;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("4")))
{
    level = 4;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("5")))
{
    level = 5;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("6")))
{
    level = 6;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("7")))
{
    level = 7;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("8")))
{
    level = 8;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("9")))
{
    level = 9;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("0")))
{
    level = 10;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("O")))
{
    level = 11;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("P")))
{
    level = 12;
    game_state = START_LEVEL;
    exit;
}

if (keyboard_check(ord("W")))
{
    fall_height = 0;
    y -=4;
    exit;
} 

if (keyboard_check(ord("S")))
{
    fall_height = 0;
    y += 4;
    exit;
}

if (keyboard_check(ord("A")))
{
    fall_height = 0;
    x -= 4;
    exit;
}

if (keyboard_check(ord("D"))) 
{
    fall_height = 0;
    x += 4;
    exit;
}

if (keyboard_check(ord("N")))
{
    keys_taken = 6;
    exit;
}

if (keyboard_check(ord("X")))
{
    show_message("x:" + string(x - 328) + " y:" + string(y - 118));
    exit;
}

if (keyboard_check(ord("C")))
{
//show_message(string(instance_count));
    show_message("x:" + string(x + 328) + " y:" + string(y + 118));
    exit;
}

if (keyboard_check(ord("V")))
{
    show_message(string(instance_count));
    exit;
}

if (keyboard_check(ord("B")))
{
    instance_activate_all();
    exit;
}

// If it's a deadly fall
if (fall_height &gt;= fall_limit)
{
    y += global.player_speed;
    
    // if the player meets anything, end the fall
    if (collision_line(x + 7, y + sprite_height, x + 23, y + sprite_height, obj_solid, true, false) != noone)
    {
        fall_height = 0;
        game_state = KILL_PLAYER;
    }
    
    exit;
}

// If the player is not falling and not jumping
if (fall_height = 0 and jumping = false)
{
    // If the player wants to jump
    if (KEY_JUMP) 
    {
        jumping = true;
        jump_index = 0;
        jumping_direction = noone;
    }
    
    // If the player wants to go right 
    if (KEY_RIGHT) 
    {
        if (jumping = true)
            jumping_direction = RIGHT;
        
        horizontal_direction = RIGHT;
        image_speed = 0.4;
        
        if (sprite_index = spr_blagger_left)
        {
            sprite_index = spr_blagger_right;
            image_index = 0 ;
        }

    }
    
    // If the player wants to go left 
    if (KEY_LEFT)
    {
        if (jumping = true)
            jumping_direction = LEFT;
            
        horizontal_direction = LEFT;
        image_speed = 0.4;
        
        if (sprite_index = spr_blagger_right)
        {
            sprite_index = spr_blagger_left;
            image_index = 0 ;
        }
        
    }
}

if (jumping = true)
{
    if (jumping_direction != noone)
        image_speed = 0.4;
    
    jump_index +=1;

    // If the player begins the fall
    if (jump_index &gt;= 25)
    {
        fall_height += 1;
        
        // Test if there is an object under the player
        id_instance_under_player = collision_line(x + 7, y + sprite_height, x + 23, y + sprite_height, obj_background, false, false);
    
        // If there is an object under the player, compute the distance to it
        if (id_instance_under_player != noone)
            collision_distance = id_instance_under_player.y - y - sprite_height;
        
        // If the player is falling on a object, stop the jump
        if (id_instance_under_player != noone and collision_distance &gt;= 0)
        {    
            jumping = false;
            fall_height = 0;
            image_speed = 0;
        }
    }
    
    // If the player is still jumping
    if (jumping = true)
    {
        vertical_direction = jump_path[jump_index,VERTICAL_DIRECTION];
        
        // If the jump position does not have an horizontal direction
        if (jump_path[jump_index,HORIZONTAL_DIRECTION] = false)
            horizontal_direction = noone;
        else
            horizontal_direction = jumping_direction;
    
        if (jump_index &gt; 64)
            jumping = false;
    }

}

if (jumping = false)
{
    // If the player is on a slide going left
    if (collision_line(x + 7, y + sprite_height + 14, x + 23, y + sprite_height + 14, obj_slide_left, false, false) != noone)
    {
        horizontal_direction = LEFT;
        vertical_direction = DOWN;
        fall_height = 0;
    }
    
    // If the player is on a slide going right
    if (collision_line (x + 7, y + sprite_height + 14, x + 23, y + sprite_height + 14, obj_slide_right, false, false) != noone)
    {
        horizontal_direction = RIGHT;
        vertical_direction = DOWN;
        fall_height = 0;
    }
    
    // If the player is not sliding
    if (vertical_direction = noone)
    {
        // Test if the player is falling
        if (collision_line(x + 7, y + sprite_height, x + 23, y + sprite_height, obj_solid, true, false) = noone)
        {
            vertical_direction = DOWN;
            horizontal_direction = noone;
            image_speed = 0;
                
            fall_height +=1;

            // If it's a deadly fall, display the white sprites
            if (fall_height = fall_limit)
            {
                deadly_fall = true;
                
                if (sprite_index = spr_blagger_right)
                    sprite_index = spr_blagger_white_right;
                else
                    sprite_index = spr_blagger_white_left;
            }
        }
        else
        {
            fall_height = 0;
        }
    }
    
    // If there is a left conveyor under the player
    if collision_line(x + 7, y + sprite_height, x + 23, y + sprite_height, obj_conveyor_left, true, false)
    {
        if (horizontal_direction = RIGHT)
            horizontal_direction = noone;
        else
            horizontal_direction = LEFT;
    }
    
    // If there is a right conveyor under the player
    if collision_line(x + 7, y + sprite_height, x + 23, y + sprite_height, obj_conveyor_right, true, false)
    {  
        if (horizontal_direction = LEFT)
            horizontal_direction = noone;
        else
            horizontal_direction = RIGHT;
    }
       
    // If the player is on a ladder
    if (collision_rectangle(x + 7, y + sprite_height - 18, x + 23, y + sprite_height - 2, obj_ladder, false, false) != noone)
        vertical_direction = UP;
}

// If the player is under a wall
if (vertical_direction = UP and collision_line (x + 7 , y - 2, x + 23, y - 2, obj_wall, false, false) != noone)
    vertical_direction = noone;
        
 // If there is something blocking on the right
if (horizontal_direction = RIGHT and collision_line(x + 24, y + 6, x + 24, y + sprite_height - 1, obj_wall, false, false) != noone)
    horizontal_direction = noone;

// if there nothing blocking on the left
if (horizontal_direction = LEFT and collision_line(x + 5, y + 6 , x + 5, y + sprite_height - 1, obj_wall, false, false) != noone)
    horizontal_direction = noone;

// Display the new position of the player
if (horizontal_direction = RIGHT)
    x += global.player_speed;

if (horizontal_direction = LEFT)
    x -= global.player_speed;

if (vertical_direction = DOWN)
    y += global.player_speed;

if (vertical_direction = UP)
    y -= global.player_speed;

// If the player meets a deadly object
if (collision_rectangle (x + 4, y, x + 28, y + sprite_height, obj_deadly, true, false))
{
    game_state = KILL_PLAYER;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fall_height</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fall_limit</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>36</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump_height</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jump_limit</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>48</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>jumping</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>deadly_fall</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_line_color(x + 7 , y - 2, x + 23, y - 2,c_white,c_white);
//draw_rectangle_color(x+4, y, x + 28, y + sprite_height-4,c_white,c_white,c_white,c_white,true);
//draw_line_color(x,y,x + sprite_width,y, c_white,c_white);
draw_sprite(sprite_index, -1, x, y);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
